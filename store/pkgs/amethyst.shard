with import ../geode.shard; {
    amethyst-kernel = lib.mkPackage rec {
        name = "amethyst-kernel";
        version = "0.0.1";

        buildDir = "./build";
        kernelElf = "amethyst-" + version + "-" + geode.architecture + ".elf";

        buildTarget = buildDir + "/" + kernelElf;
        installTarget = "install";

        publicHeaderDir = "include/amethyst";

        limineConfigTemplate = "limine.cfg.in";
        limineConfigPath = /boot/limine/limine.cfg;

        config = {
            kernel.arguments = [];
            boot = {
                loader.timeout = 5;
            };
            sanitize = [];
        };

        getSanitizers = builtins.join "," config.sanitize;

        buildDependencies = with pkgs; [
            limine
        ];

        limineConfig = template: 
            let kernelArgs = builtins.join " " config.kernel.arguments;
                sed = geode.proc.spawnPipe "sed" [
                    "-e" ("s|@VERSION@|" + version + "|g")
                    "-e" ("s|@KERNEL_ELF@|" + kernelElf + "|")
                    "-e" ("s|@KERNEL_ARGS@|" + kernelArgs + "|")
                    template
                ] "";
            in assert sed.exitCode == 0; sed.stdout;

        build = util.shell.make [buildTarget ("SANITIZERS=" + getSanitizers)];

        install = [
            (util.installFile { src = buildTarget; dst = /boot/ + kernelElf; mode = "755"; })
            (util.installDir publicHeaderDir publicHeaderDir)
            (util.writeFile (util.paths.prefix + limineConfigPath) $ limineConfig "limine.cfg.in")
        ];
    };
}
