let
    stdenv = import ./stdenv.shard;

    defaultArgs = pkgs: { inherit lib; inherit stdenv; inherit pkgs; };

    callPackageWith = dependencyPkgs: pkgs: pkgFunc :: function:
        let
            pkg = pkgFunc $ defaultArgs dependencyPkgs; 
        in
            builtins.setAttr pkg.publicName pkg.derivation pkgs;

    callPackage = pkgFunc :: function: pkgFunc << defaultArgs;

    initrdPkg = config: let
            pkgs = import ./manager.shard;
            pkgFunc = (import ./initrd.shard) config;
        in (callPackage pkgFunc pkgs).derivation;

    ensureInstalled = let
           checkInstalled = builtins.isPath; 
        in builtins.all checkInstalled;

    ensureDependencies = { name, version, ... }: depList :: list: if ensureInstalled depList
        then 0
        else builtins.seq
            (geode.debug.dump depList)
            (builtins.throw "Could not satisfy dependencies for `${name}-${version}'");

    createEnv = env :: set: value:
        let
            saveEnv = stdenv.applyEnvSet env;
            restoreEnv = stdenv.applyEnvSet saveEnv;
        in builtins.seqList [
            saveEnv
            value
            restoreEnv
            value
        ];

    sequencedTasks = tasks :: list: deriv :: set:
        let
            checkExitCode = { name, task }:
                let 
                    isOk = x: x == null || x == 0;
                    failWith = message: builtins.throw "Task `${name}` of ${deriv.name}-${deriv.version} failed with ${message}.";
                in (case task of
                    x if isOk x       => false;
                    exitCode :: int   => failWith "exit code ${exitCode}";
                    message :: string => failWith ": ${message}";
                    result            => failWith "unknown value ${result}"
                );
        in
        assert (builtins.filter checkExitCode tasks) == []; 0;

    /* builder:
       - fetch
       - patch
       - configure
       - build
       - check
       - install
       - postInstall
    */
    derivationBuilder = deriv :: set:
        let
            phases = [ "fetch" "patch" "configure" "build" "check" "install" "post install" ];

            buildDeps = deriv.buildDependencies or [];
            runtimeDeps = deriv.buildRuntimeDependencies or [];
             
            installBuildDeps = ensureDependencies deriv buildDeps;
            installRuntimeDeps = ensureDependencies deriv runtimeDeps;

            filterPhase = name: builtins.hasAttr (name + "Phase") deriv;

            builderPhase = name: let
                    phase = builtins.getAttr (name + "Phase") deriv;
                    infoMessage = geode.debug.println ">>> Entering phase ${name} of ${deriv.name}-${deriv.version}";
                in builtins.seq
                    infoMessage
                    { inherit name; task = createEnv deriv.env or {} $ phase; };

            builderTasks = 
                [ { name = "build dependencies"; task = installBuildDeps; } ]
                ++ (stdenv.lazyMap builderPhase $ stdenv.lazyFilter filterPhase phases)
                ++ [ { name = "build dependencies"; task = installRuntimeDeps; } ];

        in sequencedTasks builderTasks deriv; 

    mkDerivation = deriv :: set: 
        let
            throwMissingAttributeError = name: attrName: builtins.throw "Derivation `${name}' has missing attribute `${attrName}'";

            name = deriv.name or $ throwMissingAttributeError "<unknown>" "name";
            version = deriv.version or $ throwMissingAttributeError name "version";
        in
        {
            publicName = deriv.publicName or name;
            derivation = geode.derivation {
                inherit name;
                inherit version;

                builder = derivationBuilder deriv;
            };
        };

    mkPackage = mkDerivation;

    mkShell = decl :: set: null;

    mkSystemConfig = baseConfig :: set:
        let
            readImports = attrs :: set:
                builtins.foldl builtins.mergeTree attrs $ builtins.map import $ attrs.imports or [];

            config = readImports baseConfig;

            pkgs = import ./manager.shard;

            version = config.systemVersion or "0.0.0";

            derivHeader = { name = "system"; inherit version; };

            bootloader = config.boot.loader or 
                $ extraPackages.limine or
                $ builtins.throw "No supported boot loader selected in `boot.initrd.extraArguments'";

            finishBootstrap = let
                    isoFile = "amethyst-${version}-${stdenv.targetArch}.iso";
                in [
                    {
                        name = "remove existing image";
                        task = (case stdenv.removeFile isoFile of
                            0 => 0;
                            errno :: int => "`${isoFile}': ${stdenv.errnoString errno}"
                        );
                    }
                    {
                        name = "install limine-config";
                        task = if builtins.isPath pkgs.limine-config then 0 else 1;
                    }
                    {
                        name = "create iso image";
                        task = lib.spawnProcess [
                            "xorriso"
                            "-as" "mkisofs" "-b" "usr/share/limine/limine-bios-cd.bin"
                            "-no-emul-boot" "-boot-load-size" "4" "-boot-info-table"
                            lib.prefix "-o" isoFile
                        ];
                    }
                    {
                        name = "install bootloader";
                        task = lib.spawnProcess [
                            "${lib.prefix}/usr/bin/limine"
                            "bios-install" isoFile
                        ];
                    }
                ];
        in
            mkDerivation {
                name = derivHeader.name;
                version = derivHeader.version;

                env = config.env or {};
                buildDependencies = config.systemPackages or [];

                buildPhase = ensureDependencies derivHeader
                    (optionalPkg (config.boot.initrd.enable or false) $ initrdPkg config.boot.initrd);

                installPhase = (case geode.subcommand of
                        "bootstrap" => sequencedTasks finishBootstrap derivHeader;
                        unknown     =>
                            geode.throw "Unknown geode subcommand `${unknown}', this should never happen."
                    );       
            };

    optionalPkg = builtins.when;

    mkdirRec = path: if stdenv.fileExists path
            then 0
            else builtins.seq
                (mkdirRec (geode.file.dirname path))
                (geode.file.mkdir path);

    shell = {
        cp = args: 
            geode.proc.spawn "cp" (builtins.map builtins.toString args) true;

        install = args:
            geode.proc.spawn "install" (builtins.map builtins.toString args) true;
    };

    installFile = { src, dst, mode ? "744" }: let dstDir = geode.file.dirname (geode.prefix + dst); 
            in assert (mkdirRec dstDir) == 0;
                shell.install ["-m" mode src (geode.prefix + dst)];

    installDir = src: dst: let 
            dstDir = geode.file.dirname (geode.prefix + dst);
        in assert (mkdirRec dstDir) == 0;
            shell.cp ["-r" src (geode.prefix + dst)];

    fetchGitRepoTo = to: args:
        let
            fetchRepo = url: if geode.file.exists $ builtins.toPath "${to}/.git"
                then geode.git.pullRepo to
                else geode.git.cloneRepo url to;
            checkoutBranch = geode.git.checkoutBranch;
        in (case args of
            url :: string => fetchRepo url;
            { url, branch } => builtins.seq
                (fetchRepo url)
                (checkoutBranch branch to);
            _ => builtins.throw "invalid arguments provided to `lib.fetchGitRepoTo'"
        );
 
    defaultSourceDir = builtins.toPath "./source";

    fetchFileTo = dest: if stdenv.fileExists dest
        then _: dest
        else geode.net.downloadFile dest;
        
    fetchTarballTo = dest: geode.archive.extractTar << fetchFileTo dest;

    seqList = xs :: list: if builtins.all (x: x == 0) xs then 0 else 1;

    lib = {
        inherit defaultArgs;
        inherit defaultSourceDir;

        prefix = geode.prefix;

        inherit createEnv;
        inherit callPackage;
        inherit callPackageWith;
        inherit mkDerivation;
        inherit mkPackage;
        inherit mkShell;
        inherit mkSystemConfig;

        inherit mkdirRec;

        inherit installDir;
        inherit installFile;

        inherit fetchGitRepoTo;
        fetchGitRepo = fetchGitRepoTo defaultSourceDir;

        inherit fetchFileTo;
        fetchFile = url :: string: fetchTarballTo (builtins.basename $ builtins.toPath url) url;

        inherit fetchTarballTo;
        fetchTarball = url :: string: fetchTarballTo (builtins.basename $ builtins.toPath url) url;

        realpath = p :: path | string:
            let
                result = geode.proc.spawnPipe "realpath" [ (builtins.toString p) ] "";
            in if result.exitCode == 0
                then builtins.toPath $ builtins.trim $ result.stdout
                else builtins.throw "realpath exited with code ${result.exitCode}: ${result.stderr}";

        make = args :: list: 
            geode.proc.spawn "make" (builtins.map builtins.toString (args ++ ["-j" (geode.proc.nJobs)])) true;

        spawnProcess = args :: list:
            geode.proc.spawn (builtins.head args) (builtins.map builtins.toString $ builtins.tail args) true;

        requireFile = file: if stdenv.fileExists file
            then null
            else "`${file}': No such file or directory";

        installFiles = files :: list: lib.seqList $ builtins.map installFile files;

        writeFile = file: data: builtins.seq
            (mkdirRec $ geode.file.dirname file)
            (geode.file.writeFile file $ builtins.toString data);

        runPrecompiled = args :: list:
            if (geode.getenv "NIXOS_HOST") == null
                then args
                else [ "steam-run" ] ++ args;

        storeEntry = geode.storeEntry;

        inherit seqList;
        seq = a: b: if a == 0 && b == 0 then 0 else 1;
    };
in lib
