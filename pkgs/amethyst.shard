{ lib, pkgs, stdenv, ... }: 
lib.mkPackage rec {
    name = "amethyst-kernel";
    version = "0.0.1";

    buildDir = lib.realpath "build";
    sourceDir = builtins.toPath "${pkgs.amethyst-source}/source";
 
    config = {
        kernel.arguments = [];
        kernel.extra-arguments = [];
        boot = {
            loader.timeout = 5;
        };
        sanitize = [];
    };

    kernelElf = "amethyst-" + version + "-" + geode.architecture + ".elf";
    
    limineConfigTemplate = "${sourceDir}/limine.cfg.in";
    limineConfigPath = /boot/limine/limine.cfg;

    buildTarget = buildDir + "/" + kernelElf;
    installTarget = "install";

    publicHeaderDir = "${sourceDir}/include/amethyst";

    fullArguments = config.kernel.arguments ++ [ "--" ] ++ config.kernel.extra-arguments;

    env = {
        # kernel cannot use system import
        C_CXX_FLAGS="-I${pkgs.limine}";
        BUILD_DIR=builtins.toString buildDir;
        SANITIZERS=getSanitizers;
    };

    buildDependencies = [
        pkgs.limine
    ];

    limineConfig = template: 
        let 
            kernelArgs = builtins.join " " fullArguments;
            sed = geode.proc.spawnPipe "sed" [
                "-e" ("s|@VERSION@|" + version + "|g")
                "-e" ("s|@KERNEL_ELF@|" + kernelElf + "|")
                "-e" ("s|@KERNEL_ARGS@|" + kernelArgs + "|")
                template
            ] "";
    in assert sed.exitCode == 0; sed.stdout;

    getSanitizers = builtins.join "," config.sanitize;

    buildPhase = lib.make ["-C" sourceDir buildTarget "BUILD_DIR=${buildDir}" "SANITIZERS=${getSanitizers}"];

    installPhase = builtins.seqList [
        (lib.installFile { src = buildTarget; dst = /boot/ + kernelElf; mode = "755"; })
        (lib.installDir publicHeaderDir /usr/include)
        (stdenv.writeFile "${lib.prefix}/boot/amethyst-${version}-${geode.architecture}-cmdline.txt" $ builtins.join " " config.kernel.arguments or [])
        # (lib.writeFile (geode.prefix + limineConfigPath) $ limineConfig "limine.cfg.in")
    ];
}

