let
    defaultConfig = {
        sanitize = [];
        defines = {};
    };
in
{ lib, pkgs, stdenv, config ? defaultConfig, ... }: 
lib.mkPackage rec {
    name = config.overrideName or "amethyst-kernel";
    version = "0.0.1";

    buildDir = lib.realpath "build";
    sourceDir = builtins.toPath "${pkgs.amethyst-source}/source"; 
    
    targetElf = "amethyst-${version}-${geode.architecture}.elf";
    kernelElf = "${name}-${version}-${geode.architecture}.elf";    

    buildTarget = "${buildDir}/${targetElf}";
    installTarget = "install";

    linkerScript = "${sourceDir}/arch/${stdenv.targetArch}/link.ld";

    uacpi = pkgs.uacpi.override { 
        overrideName = name;
        extraCFlags = [
            "-ffreestanding" "-fstack-protector" "-fno-lto" "-fPIE" "-g"
        ]; 
        extraLDFlags = [
        ];
    };

    env = {
            # kernel cannot use system import
            C_CXX_FLAGS="-I${pkgs.limine} -I${uacpi}/${uacpi.exports.includeDir}" + getDefines;
            LDFLAGS="${uacpi}/${uacpi.exports.staticLib}";
            BUILD_DIR=builtins.toString buildDir;
            SANITIZERS=getSanitizers;
        };

    buildDependencies = [
        pkgs.limine
        uacpi
    ];

    getDefines = with builtins;
        join " " $ attrValues $ mapAttrs (key: val: "${key} ${val}") config.defines;

    getSanitizers = builtins.join "," config.sanitize;

    buildPhase = lib.make ["-C" sourceDir buildTarget "BUILD_DIR=${buildDir}" "SANITIZERS=${getSanitizers}"];

    installPhase = lib.installFile { src = buildTarget; dst = /boot/ + kernelElf; mode = "755"; };
}

