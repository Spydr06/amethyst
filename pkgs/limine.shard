{ lib, pkgs, stdenv, ... }:
lib.mkPackage rec {
    name = "limine";
    version = "7.4.1";

    config = {
        platform = {
            efi = true;
            bios = true;
        };
    };

    sourceDir = let
            url = lib.fetchTarball "https://github.com/limine-bootloader/limine/releases/download/v${version}/limine-${version}.tar.gz";
        in url;

    fetchPhase = lib.requireFile sourceDir;

    configurePhase = if stdenv.fileExists "GNUmakefile" 
        then 0
        else geode.proc.spawn "${sourceDir}/configure" (
            [ "--prefix" "${lib.prefix}/usr" ]
            ++ (builtins.when config.platform.bios [ "--enable-bios" "--enable-bios-cd" ])
            ++ (builtins.when config.platform.efi [ "--enable-uefi-x86-64" "--enable-uefi-cd" ])
        )
        true;

    buildPhase = lib.make ["all"];

    installPhase = let
            bootDir = builtins.toPath "/boot/limine";

            loaders = (builtins.when config.platform.bios [ "limine-bios.sys" "limine-bios-cd.bin" ])
                ++ (builtins.when config.platform.efi "limine-uefi-cd.bin");

            efiLoaders = [ "BOOTX64.EFI" /* "BOOTIA32.EFI" */ ];
        in lib.seqList [ 
                (lib.make ["install"])
                (lib.installFiles $ builtins.map (f: { src = "./bin/${f}"; dst = "${bootDir}/${f}"; mode = 0644; }) loaders)
                (lib.installFiles $ builtins.map (f: { src = "./bin/${f}"; dst = "/EFI/BOOT/${f}"; mode = 0744; }) efiLoaders)
            ];
}

